#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const amira_lambda_parallel_stack_1 = require("../lib/amira-lambda-parallel-stack");
const cdk_nag_1 = require("cdk-nag");
const app = new cdk.App();
const stack = new amira_lambda_parallel_stack_1.AmiraLambdaParallelStack(app, 'AmiraLambdaParallelStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION,
    },
});
// Enable CDK-nag with AWS Solutions Checks
cdk.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
// Curated suppressions for Lambda parallel processing stack
cdk_nag_1.NagSuppressions.addStackSuppressions(stack, [
    {
        id: 'AwsSolutions-SQS3',
        reason: 'DLQ configured with appropriate retention; messages sent to DLQ after maxReceiveCount attempts'
    },
    {
        id: 'AwsSolutions-IAM4',
        reason: 'AWS managed policies required for Lambda execution, Athena queries, and S3 operations'
    },
    {
        id: 'AwsSolutions-IAM5',
        reason: 'Wildcard permissions needed for dynamic S3 paths, Athena result locations, and CloudWatch metrics'
    },
    {
        id: 'AwsSolutions-L1',
        reason: 'Lambda functions use Docker images with controlled runtime versions and security updates'
    },
    {
        id: 'AwsSolutions-COD4',
        reason: 'CodeDeploy canary deployment configured via LambdaDeploymentConstruct for safe rollouts'
    }
]);
// The stack handles parameter defaults and SSM lookups internally
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1pcmEtbGFtYmRhLXBhcmFsbGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vYmluL2FtaXJhLWxhbWJkYS1wYXJhbGxlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLG9GQUE4RTtBQUM5RSxxQ0FBOEQ7QUFFOUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxzREFBd0IsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLEVBQUU7SUFDMUUsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1FBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQjtLQUN2QztDQUNGLENBQUMsQ0FBQztBQUVILDJDQUEyQztBQUMzQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSw0QkFBa0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFbkUsNERBQTREO0FBQzVELHlCQUFlLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO0lBQzFDO1FBQ0UsRUFBRSxFQUFFLG1CQUFtQjtRQUN2QixNQUFNLEVBQUUsZ0dBQWdHO0tBQ3pHO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsbUJBQW1CO1FBQ3ZCLE1BQU0sRUFBRSx1RkFBdUY7S0FDaEc7SUFDRDtRQUNFLEVBQUUsRUFBRSxtQkFBbUI7UUFDdkIsTUFBTSxFQUFFLG1HQUFtRztLQUM1RztJQUNEO1FBQ0UsRUFBRSxFQUFFLGlCQUFpQjtRQUNyQixNQUFNLEVBQUUsMEZBQTBGO0tBQ25HO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsbUJBQW1CO1FBQ3ZCLE1BQU0sRUFBRSx5RkFBeUY7S0FDbEc7Q0FDRixDQUFDLENBQUM7QUFFSCxrRUFBa0UiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQW1pcmFMYW1iZGFQYXJhbGxlbFN0YWNrIH0gZnJvbSAnLi4vbGliL2FtaXJhLWxhbWJkYS1wYXJhbGxlbC1zdGFjayc7XG5pbXBvcnQgeyBBd3NTb2x1dGlvbnNDaGVja3MsIE5hZ1N1cHByZXNzaW9ucyB9IGZyb20gJ2Nkay1uYWcnO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBBbWlyYUxhbWJkYVBhcmFsbGVsU3RhY2soYXBwLCAnQW1pcmFMYW1iZGFQYXJhbGxlbFN0YWNrJywge1xuICBlbnY6IHtcbiAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULFxuICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OLFxuICB9LFxufSk7XG5cbi8vIEVuYWJsZSBDREstbmFnIHdpdGggQVdTIFNvbHV0aW9ucyBDaGVja3NcbmNkay5Bc3BlY3RzLm9mKGFwcCkuYWRkKG5ldyBBd3NTb2x1dGlvbnNDaGVja3MoeyB2ZXJib3NlOiB0cnVlIH0pKTtcblxuLy8gQ3VyYXRlZCBzdXBwcmVzc2lvbnMgZm9yIExhbWJkYSBwYXJhbGxlbCBwcm9jZXNzaW5nIHN0YWNrXG5OYWdTdXBwcmVzc2lvbnMuYWRkU3RhY2tTdXBwcmVzc2lvbnMoc3RhY2ssIFtcbiAge1xuICAgIGlkOiAnQXdzU29sdXRpb25zLVNRUzMnLFxuICAgIHJlYXNvbjogJ0RMUSBjb25maWd1cmVkIHdpdGggYXBwcm9wcmlhdGUgcmV0ZW50aW9uOyBtZXNzYWdlcyBzZW50IHRvIERMUSBhZnRlciBtYXhSZWNlaXZlQ291bnQgYXR0ZW1wdHMnXG4gIH0sXG4gIHtcbiAgICBpZDogJ0F3c1NvbHV0aW9ucy1JQU00JyxcbiAgICByZWFzb246ICdBV1MgbWFuYWdlZCBwb2xpY2llcyByZXF1aXJlZCBmb3IgTGFtYmRhIGV4ZWN1dGlvbiwgQXRoZW5hIHF1ZXJpZXMsIGFuZCBTMyBvcGVyYXRpb25zJ1xuICB9LFxuICB7XG4gICAgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsXG4gICAgcmVhc29uOiAnV2lsZGNhcmQgcGVybWlzc2lvbnMgbmVlZGVkIGZvciBkeW5hbWljIFMzIHBhdGhzLCBBdGhlbmEgcmVzdWx0IGxvY2F0aW9ucywgYW5kIENsb3VkV2F0Y2ggbWV0cmljcydcbiAgfSxcbiAge1xuICAgIGlkOiAnQXdzU29sdXRpb25zLUwxJyxcbiAgICByZWFzb246ICdMYW1iZGEgZnVuY3Rpb25zIHVzZSBEb2NrZXIgaW1hZ2VzIHdpdGggY29udHJvbGxlZCBydW50aW1lIHZlcnNpb25zIGFuZCBzZWN1cml0eSB1cGRhdGVzJ1xuICB9LFxuICB7XG4gICAgaWQ6ICdBd3NTb2x1dGlvbnMtQ09ENCcsXG4gICAgcmVhc29uOiAnQ29kZURlcGxveSBjYW5hcnkgZGVwbG95bWVudCBjb25maWd1cmVkIHZpYSBMYW1iZGFEZXBsb3ltZW50Q29uc3RydWN0IGZvciBzYWZlIHJvbGxvdXRzJ1xuICB9XG5dKTtcblxuLy8gVGhlIHN0YWNrIGhhbmRsZXMgcGFyYW1ldGVyIGRlZmF1bHRzIGFuZCBTU00gbG9va3VwcyBpbnRlcm5hbGx5XG4iXX0=